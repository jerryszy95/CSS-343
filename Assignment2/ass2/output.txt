Script started on Sun 28 Jan 2018 09:38:20 PM PST
shen95@uw1-320-01:~$ valgrind ./ass2g++ -std=c++14 -g -Wall -Wextra ass2.cpp -o ass2
shen95@uw1-320-01:~$ g++ -std=c++14 -g -Wall -Wextra ass2.cpp -o ass2[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cvalgrind ./ass2[K
==5032== Memcheck, a memory error detector
==5032== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==5032== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==5032== Command: ./ass2
==5032== 
OK: bst1 != bst2
OK: bst1 == bst2
OK: bst1 contains d
OK: bst1 does not contain x
OK: adding g second time returns false
OK: bst3 does not contain x
OK: bst3 contains g
OK: bst4 == bst2
treeMenuString
1. Add
2. Search
3. Inorder traverse
4. Height & Number of nodes
5. Rebalance
6. Add Multiple
7. Clear tree
8. Create tree from sorted array
10. Exit
>> 6
Enter multiple strings: l k j h g f d s a
Added l
Added k
Added j
Added h
Added g
Added f
Added d
Added s
Added a
            s
        l
            k
                j
                    h
                        g
                            f
                                d
                                    a
treeMenuString
1. Add
2. Search
3. Inorder traverse
4. Height & Number of nodes
5. Rebalance
6. Add Multiple
7. Clear tree
8. Create tree from sorted array
10. Exit
>> 4
Height: 8
Number of nodes: 9
            s
        l
            k
                j
                    h
                        g
                            f
                                d
                                    a
treeMenuString
1. Add
2. Search
3. Inorder traverse
4. Height & Number of nodes
5. Rebalance
6. Add Multiple
7. Clear tree
8. Create tree from sorted array
10. Exit
>> 5
                s
            l
                k
                    j
        h
                g
            f
                d
                    a
treeMenuString
1. Add
2. Search
3. Inorder traverse
4. Height & Number of nodes
5. Rebalance
6. Add Multiple
7. Clear tree
8. Create tree from sorted array
10. Exit
>> 3
a d f g h j k l s 
                s
            l
                k
                    j
        h
                g
            f
                d
                    a
treeMenuString
1. Add
2. Search
3. Inorder traverse
4. Height & Number of nodes
5. Rebalance
6. Add Multiple
7. Clear tree
8. Create tree from sorted array
10. Exit
>> 2
Enter a string: w
Not Found w
                s
            l
                k
                    j
        h
                g
            f
                d
                    a
treeMenuString
1. Add
2. Search
3. Inorder traverse
4. Height & Number of nodes
5. Rebalance
6. Add Multiple
7. Clear tree
8. Create tree from sorted array
10. Exit
>> e d
Bad input
                s
            l
                k
                    j
        h
                g
            f
                d
                    a
treeMenuString
1. Add
2. Search
3. Inorder traverse
4. Height & Number of nodes
5. Rebalance
6. Add Multiple
7. Clear tree
8. Create tree from sorted array
10. Exit
>> 2d 
Enter a string: d
Found d
                s
            l
                k
                    j
        h
                g
            f
                d
                    a
treeMenuString
1. Add
2. Search
3. Inorder traverse
4. Height & Number of nodes
5. Rebalance
6. Add Multiple
7. Clear tree
8. Create tree from sorted array
10. Exit
>> 7
treeMenuString
1. Add
2. Search
3. Inorder traverse
4. Height & Number of nodes
5. Rebalance
6. Add Multiple
7. Clear tree
8. Create tree from sorted array
10. Exit
>> 8
Enter multiple strings: h k n q r t u w x z
                z
            x
                w
                    u
        t
                r
                    q
            n
                k
                    h
treeMenuString
1. Add
2. Search
3. Inorder traverse
4. Height & Number of nodes
5. Rebalance
6. Add Multiple
7. Clear tree
8. Create tree from sorted array
10. Exit
>> 4
Height: 4
Number of nodes: 10
                z
            x
                w
                    u
        t
                r
                    q
            n
                k
                    h
treeMenuString
1. Add
2. Search
3. Inorder traverse
4. Height & Number of nodes
5. Rebalance
6. Add Multiple
7. Clear tree
8. Create tree from sorted array
10. Exit
>> 5
                z
            x
                w
                    u
        t
                r
                    q
            n
                k
                    h
treeMenuString
1. Add
2. Search
3. Inorder traverse
4. Height & Number of nodes
5. Rebalance
6. Add Multiple
7. Clear tree
8. Create tree from sorted array
10. Exit
>> 10
==5032== 
==5032== HEAP SUMMARY:
==5032==     in use at exit: 72,704 bytes in 1 blocks
==5032==   total heap usage: 68 allocs, 67 frees, 81,305 bytes allocated
==5032== 
==5032== LEAK SUMMARY:
==5032==    definitely lost: 0 bytes in 0 blocks
==5032==    indirectly lost: 0 bytes in 0 blocks
==5032==      possibly lost: 0 bytes in 0 blocks
==5032==    still reachable: 72,704 bytes in 1 blocks
==5032==         suppressed: 0 bytes in 0 blocks
==5032== Rerun with --leak-check=full to see details of leaked memory
==5032== 
==5032== For counts of detected and suppressed errors, rerun with: -v
==5032== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
shen95@uw1-320-01:~$ exit

Script done on Sun 28 Jan 2018 09:40:57 PM PST
